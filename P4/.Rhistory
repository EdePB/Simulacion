source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
n = 3
i = 2
n > i
n > i && n %% i == 0
n > i && (n %% i) == 0
n > i && ((n %% i) == 0)
(n > i) && ((n %% i) == 0)
((n > i) && ((n %% i) == 0))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
for (i in 2:(n-1)) {
if ((n > i) && ((n %% i) == 0))
print(i)
}
((n > i) && ((n %% i) == 0))
n
i
((n > i) && ((n %% i) == 0))
(n > i) && ((n %% i) == 0)
(n > i) && (n %% i == 0)
(n > i) && n %% i == 0
n > i && n %% i == 0
n > i & n %% i == 0
n>i & n %%i==0
n>i&&n%%i==0
n>i
n %% i
n
i
i = 2
n %% i
n>i&&n%%i==0
n
n - 1
2:0
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("doParallel")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/codigo correcto4.R', echo=TRUE)
h <-  2000 # hasta
replicas <- 30
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
tiempos <-  numeric()
for (r in 1:replicas) {
# tomamos el "elapsed" de la salida de system.time, es el tercer dato
t <- system.time(foreach(n = d:h, .combine=c) %dopar% primo(n))[3]
tiempos <- c(tiempos, t)
}
stopImplicitCluster()
summary(tiempos)
source('~/GitHub/SimulacionComputacional/P3/codigo correcto4.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/codigo correcto4.R', echo=TRUE)
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
tiempos <-  numeric()
for (r in 1:replicas) {
# tomamos el "elapsed" de la salida de system.time, es el tercer dato
t <- system.time(foreach(n = d:h, .combine=c) %dopar% primo(n))[3]
tiempos <- c(tiempos, t)
}
stopImplicitCluster()
summary(tiempos)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P3")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print(all)
source('~/.active-rstudio-document', echo=TRUE)
all
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ot
mean(ot)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
datos
dimnames(datos)
dimnames(datos)
source('~/.active-rstudio-document', echo=TRUE)
datos
dimnames(datos)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
datos
dimnames(datos)
datos
rownames(datos)
source('~/.active-rstudio-document', echo=TRUE)
datos
boxplot(datos)
boxplot(datos, xlab="nucleos", ylab="tiempo", main="analisis") graphics.off()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
graphics.off(datos)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
datos
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P3")
datos
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
it
at
ot
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ot <- c(ot, system.time(foreach(n = original, .combine=c) %dopar% primo(n))[3]) # de menor a mayor
it <- c(it, system.time(foreach(n = invertido, .combine=c) %dopar% primo(n))[3]) # de mayor a menor
at <- c(at, system.time(foreach(n = sample(original), .combine=c) %dopar% primo(n))[3]) # orden aleatorio
}
stopImplicitCluster()
datos=rbind(ot,it,at)
nombre = paste("p3r", ncl, ".png", sep="")
NNucleo = paste("Nucleos:", ncl)
png(nombre)
boxplot(data.matrix(datos),use.cols=FALSE, xlab="Orden", ylab="Tiempo", main=NNucleo)
graphics.off()
}
summary(ot)
summary(it)
summary(at)
source('~/GitHub/SimulacionComputacional/P3/Practica3R.R', echo=TRUE)
prueba = matrix(c(0, 1, 0, 0), nrows=2)
prueba = matrix(c(0, 1, 0, 0), nrow=2)
prueba
image(prueba)
par(mar=c(0, 0, 0, 0))
image(prueba)
prueba = matrix(c(0, 1, 0, 0, 0, 1, 1, 1), nrow=2)
prueba
image(prueba)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(prueba))
image(prueba)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P4")
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P4/Grietas.R', echo=TRUE)
largos
source('~/GitHub/SimulacionComputacional/P4/Grietas.R', echo=TRUE)
View(vp)
