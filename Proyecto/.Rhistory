print(y)}
if(f$Regresion=="Lineal"){y=(f$C.lineal*V) + f$Interseccion
print("l")}
if(f$Regresion=="Exponencial"){y=f$C.lineal*log(V) + f$Interseccion
print("e")}
res<-c(res,y)
}
return(res)
}
Soluciones<-foreach(j=2:3,.combine = cbind)%dopar%funciones(j)
stopImplicitCluster()
Soluciones <- data.frame(matrix(unlist(Soluciones), ncol=2))
Soluciones$viscosidad<-Vi
png("p_inicial.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diametro (minimizar)", ylab="voltaje (minimizar)", main="Relación de parámetros")
graphics.off()
sign<-c(-1, -1)
mejordiam <- which.max(sign[1] * Soluciones[,1])#elige el maximom sign por evaluacion
mejorvolt <- which.max(sign[2] * Soluciones[,2])
png("p11_init.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diámetro (min)", ylab="voltaje (min)", main="Relación de parámetros")
graphics.off()
png("p_mejores.png")
plot(Soluciones[,1], Soluciones[,2], xlab="Diámetro (mejor con cuadro azul)",
ylab="voltaje (mejor con bolita naranja)",
main="Relación de parámetros")
points(Soluciones[mejordiam, 1], Soluciones[mejordiam, 2], col="blue", pch=15, cex=1.5)
points(Soluciones[mejorvolt, 1], Soluciones[mejorvolt, 2], col="orange", pch=16, cex=1.5)
graphics.off()
no.dom <- logical()
dom <- integer()
###################paralelizar dominantes
#for (i in 1:n) {
p3<-function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * Soluciones[i,], sign * Soluciones[j,], 2))
}
cuantos <- sum(d)
#return( cuantos)
return( cuantos == 0) # nadie le domina
}
no.dom<-rbind(no.dom,foreach(i = 1:n, .combine=rbind)%dopar% p3(i))
frente <- subset(Soluciones, no.dom) # solamente las no dominadas
png("p_frente.png")
plot (Soluciones[,1], Soluciones[,2], xlab= "Diámetro",
ylab="Voltaje",
main="Frente de Pareto")
points(frente[,1], frente[,2], col="green", pch=16, cex=1.5)
graphics.off()
dimfrente<-dim(frente)[1]
if(dimfrente>2){
ordenf<-frente[order(frente[,1]),]
dis<-c()
for(i in 1:dimfrente-1){
d<- sqrt((ordenf[i,1]-ordenf[i+1,1])**2+(ordenf[i,2]-ordenf[i+1,2])**2)
dis<-c(dis,d)
}
umbral<-mean(dis-14)
nuevo<-rep(FALSE,dimfrente)
for(i in 1:dimfrente){
if (ordenf[i,]==head(ordenf,n=1)||ordenf[i,]==tail(ordenf,n=1)){
nuevo[i]=TRUE
}else{
j<-max(which(nuevo))
d<-sqrt((ordenf[i,1]-ordenf[j,1])**2+(ordenf[i,2]-ordenf[j,2])**2)
if(d>=umbral){
nuevo[i]=TRUE
}else{nuevo[i]=FALSE
}
}
}
mejor<-subset(ordenf,nuevo)
library(ggplot2)
png("pfrentemod.png")
ggplot()+
geom_point(data = Soluciones, aes(x=Soluciones[,1], y=Soluciones[,2]),size=2)+
xlab("Diametro") +
ylab("Voltaje") +
geom_point(data = frente, aes(x=frente[,1],y=frente[,2]), color="blue", size=4)+
geom_point(data = mejor, aes(x=mejor[,1],y=mejor[,2]), color="red", size=2)+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Diversificación de frente")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
plot.title = element_text(size=14,face="bold"))+
#graphics.off()
ggsave("pfrentemod.png", width=10, height=5)
png("pnuevofrente.png")
ggplot()+
geom_point(data = Soluciones, aes(x=Soluciones[,1], y=Soluciones[,2]),size=2)+
xlab("Diametro") +
ylab("Voltaje") +
geom_point(data = mejor, aes(x=mejor[,1],y=mejor[,2]), color="red", size=4)+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Nuevo frente")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
plot.title = element_text(size=14,face="bold"))+
#graphics.off()
ggsave("pnuevofrente.png",width = 10, height = 5)
}
stopImplicitCluster()
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
gc()
rm(list = ls())
timei<-Sys.time()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
datos<-read.csv(file="exp.csv", head=TRUE, sep = ",")
reg<-data.frame()
exponentes<-3
columna<-dim(datos)[2]
for (i in seq(2,columna,1)){
lineal<-lm(datos[,i] ~datos[,1], datos)
exponencial<-lm(log(datos[,i])~datos[,1],datos)
polinomial<-lm(datos[,i] ~ poly(datos[,1],exponentes,raw = TRUE),datos)
lin<-cbind(colnames(datos)[i],"Lineal",summary(lineal)$r.squared,summary(lineal)$coefficients[2,1],
0,0,summary(lineal)$coefficients[1,1])
exp<-cbind(colnames(datos)[i],"Exponencial",summary(exponencial)$r.squared,summary(exponencial)$coefficients[2,1],
0,0,summary(exponencial)$coefficients[1,1])
poli<-cbind(colnames(datos)[i],"Polinomial",summary(polinomial)$r.squared,summary(polinomial)$coefficients[2,1],
summary(polinomial)$coefficients[3,1],summary(polinomial)$coefficients[4,1],summary(exponencial)$coefficients[1,1])
reg<-rbind(reg,lin,exp,poli)
}
colnames(reg)<-c("Caracteristica","Regresion","Rcuadrada","C.lineal",
"C.cuadratico","C.cubico","Interseccion")
reg$Rcuadrada<-as.numeric(levels(reg$Rcuadrada))[reg$Rcuadrada]
reg$C.lineal<-as.numeric(levels(reg$C.lineal))[reg$C.lineal]
reg$C.cuadratico<-as.numeric(levels(reg$C.cuadratico))[reg$C.cuadratico]
reg$C.cubico<-as.numeric(levels(reg$C.cubico))[reg$C.cubico]
reg$Interseccion<-as.numeric(levels(reg$Interseccion))[reg$Interseccion]
n<-200
Vi<-runif(n,800,4500)
funciones<-function(j){
#for(j in 2:3){
res<-c()
nombre<-colnames(datos)[j]
temporal<-reg[reg$Caracteristica==nombre,]
f<-temporal[which.max(temporal$Rcuadrada),]
for(k in 1:n){
V<-Vi[k]
if (f$Regresion=="Polinomial"){y=(f$C.lineal*V) +(f$C.cuadratico*(V**2))
+ (f$C.cubico*(V**3))+ f$Interseccion
print("p")
print(y)}
if(f$Regresion=="Lineal"){y=(f$C.lineal*V) + f$Interseccion
print("l")}
if(f$Regresion=="Exponencial"){y=f$C.lineal*log(V) + f$Interseccion
print("e")}
res<-c(res,y)
}
return(res)
}
Soluciones<-foreach(j=2:3,.combine = cbind)%dopar%funciones(j)
stopImplicitCluster()
Soluciones <- data.frame(matrix(unlist(Soluciones), ncol=2))
Soluciones$viscosidad<-Vi
png("p_inicial.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diametro (minimizar)", ylab="voltaje (minimizar)", main="Relación de parámetros")
graphics.off()
sign<-c(-1, -1)
mejordiam <- which.max(sign[1] * Soluciones[,1])#elige el maximom sign por evaluacion
mejorvolt <- which.max(sign[2] * Soluciones[,2])
png("p11_init.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diámetro (min)", ylab="voltaje (min)", main="Relación de parámetros")
graphics.off()
png("p_mejores.png")
plot(Soluciones[,1], Soluciones[,2], xlab="Diámetro (mejor con cuadro azul)",
ylab="voltaje (mejor con bolita naranja)",
main="Relación de parámetros")
points(Soluciones[mejordiam, 1], Soluciones[mejordiam, 2], col="blue", pch=15, cex=1.5)
points(Soluciones[mejorvolt, 1], Soluciones[mejorvolt, 2], col="orange", pch=16, cex=1.5)
graphics.off()
no.dom <- logical()
dom <- integer()
###################paralelizar dominantes
#for (i in 1:n) {
p3<-function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * Soluciones[i,], sign * Soluciones[j,], 2))
}
cuantos <- sum(d)
#return( cuantos)
return( cuantos == 0) # nadie le domina
}
no.dom<-rbind(no.dom,foreach(i = 1:n, .combine=rbind)%dopar% p3(i))
frente <- subset(Soluciones, no.dom) # solamente las no dominadas
png("p_frente.png")
plot (Soluciones[,1], Soluciones[,2], xlab= "Diámetro",
ylab="Voltaje",
main="Frente de Pareto")
points(frente[,1], frente[,2], col="green", pch=16, cex=1.5)
graphics.off()
dimfrente<-dim(frente)[1]
if(dimfrente>2){
ordenf<-frente[order(frente[,1]),]
dis<-c()
for(i in 1:dimfrente-1){
d<- sqrt((ordenf[i,1]-ordenf[i+1,1])**2+(ordenf[i,2]-ordenf[i+1,2])**2)
dis<-c(dis,d)
}
umbral<-mean(dis-14.5)
nuevo<-rep(FALSE,dimfrente)
for(i in 1:dimfrente){
if (ordenf[i,]==head(ordenf,n=1)||ordenf[i,]==tail(ordenf,n=1)){
nuevo[i]=TRUE
}else{
j<-max(which(nuevo))
d<-sqrt((ordenf[i,1]-ordenf[j,1])**2+(ordenf[i,2]-ordenf[j,2])**2)
if(d>=umbral){
nuevo[i]=TRUE
}else{nuevo[i]=FALSE
}
}
}
mejor<-subset(ordenf,nuevo)
library(ggplot2)
png("pfrentemod.png")
ggplot()+
geom_point(data = Soluciones, aes(x=Soluciones[,1], y=Soluciones[,2]),size=2)+
xlab("Diametro") +
ylab("Voltaje") +
geom_point(data = frente, aes(x=frente[,1],y=frente[,2]), color="blue", size=4)+
geom_point(data = mejor, aes(x=mejor[,1],y=mejor[,2]), color="red", size=2)+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Diversificación de frente")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
plot.title = element_text(size=14,face="bold"))+
#graphics.off()
ggsave("pfrentemod.png", width=10, height=5)
png("pnuevofrente.png")
ggplot()+
geom_point(data = Soluciones, aes(x=Soluciones[,1], y=Soluciones[,2]),size=2)+
xlab("Diametro") +
ylab("Voltaje") +
geom_point(data = mejor, aes(x=mejor[,1],y=mejor[,2]), color="red", size=4)+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Nuevo frente")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
plot.title = element_text(size=14,face="bold"))+
#graphics.off()
ggsave("pnuevofrente.png",width = 10, height = 5)
}
stopImplicitCluster()
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
png("pnuevofrente.png")
ggplot()+
geom_point(data = Soluciones, aes(x=Soluciones[,1], y=Soluciones[,2]),size=2)+
xlab("Diametro") +
ylab("Voltaje") +
geom_point(data = mejor, aes(x=mejor[,1],y=mejor[,2]), color="red", size=4)+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Nuevo frente")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
plot.title = element_text(size=14,face="bold"))+
#graphics.off()
ggsave("pnuevofrente.png",width = 10, height = 5)
timei<-Sys.time()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
datos<-read.csv(file="exp.csv", head=TRUE, sep = ",")
reg<-data.frame()
exponentes<-3
columna<-dim(datos)[2]
for (i in seq(2,columna,1)){
lineal<-lm(datos[,i] ~datos[,1], datos)
exponencial<-lm(log(datos[,i])~datos[,1],datos)
polinomial<-lm(datos[,i] ~ poly(datos[,1],exponentes,raw = TRUE),datos)
lin<-cbind(colnames(datos)[i],"Lineal",summary(lineal)$r.squared,summary(lineal)$coefficients[2,1],
0,0,summary(lineal)$coefficients[1,1])
exp<-cbind(colnames(datos)[i],"Exponencial",summary(exponencial)$r.squared,summary(exponencial)$coefficients[2,1],
0,0,summary(exponencial)$coefficients[1,1])
poli<-cbind(colnames(datos)[i],"Polinomial",summary(polinomial)$r.squared,summary(polinomial)$coefficients[2,1],
summary(polinomial)$coefficients[3,1],summary(polinomial)$coefficients[4,1],summary(exponencial)$coefficients[1,1])
reg<-rbind(reg,lin,exp,poli)
}
colnames(reg)<-c("Caracteristica","Regresion","Rcuadrada","C.lineal",
"C.cuadratico","C.cubico","Interseccion")
reg$Rcuadrada<-as.numeric(levels(reg$Rcuadrada))[reg$Rcuadrada]
reg$C.lineal<-as.numeric(levels(reg$C.lineal))[reg$C.lineal]
reg$C.cuadratico<-as.numeric(levels(reg$C.cuadratico))[reg$C.cuadratico]
reg$C.cubico<-as.numeric(levels(reg$C.cubico))[reg$C.cubico]
reg$Interseccion<-as.numeric(levels(reg$Interseccion))[reg$Interseccion]
n<-200
Vi<-runif(n,800,4500)
funciones<-function(j){
#for(j in 2:3){
res<-c()
nombre<-colnames(datos)[j]
temporal<-reg[reg$Caracteristica==nombre,]
f<-temporal[which.max(temporal$Rcuadrada),]
for(k in 1:n){
V<-Vi[k]
if (f$Regresion=="Polinomial"){y=(f$C.lineal*V) +(f$C.cuadratico*(V**2))
+ (f$C.cubico*(V**3))+ f$Interseccion
print("p")
print(y)}
if(f$Regresion=="Lineal"){y=(f$C.lineal*V) + f$Interseccion
print("l")}
if(f$Regresion=="Exponencial"){y=f$C.lineal*log(V) + f$Interseccion
print("e")}
res<-c(res,y)
}
return(res)
}
Soluciones<-foreach(j=2:3,.combine = cbind)%dopar%funciones(j)
stopImplicitCluster()
Soluciones <- data.frame(matrix(unlist(Soluciones), ncol=2))
Soluciones$viscosidad<-Vi
png("p_inicial.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diametro (minimizar)", ylab="voltaje (minimizar)", main="Relación de parámetros")
graphics.off()
sign<-c(-1, -1)
mejordiam <- which.max(sign[1] * Soluciones[,1])#elige el maximom sign por evaluacion
mejorvolt <- which.max(sign[2] * Soluciones[,2])
png("p11_init.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diámetro (min)", ylab="voltaje (min)", main="Relación de parámetros")
graphics.off()
png("p_mejores.png")
plot(Soluciones[,1], Soluciones[,2], xlab="Diámetro (mejor con cuadro azul)",
ylab="voltaje (mejor con bolita naranja)",
main="Relación de parámetros")
points(Soluciones[mejordiam, 1], Soluciones[mejordiam, 2], col="blue", pch=15, cex=1.5)
points(Soluciones[mejorvolt, 1], Soluciones[mejorvolt, 2], col="orange", pch=16, cex=1.5)
graphics.off()
no.dom <- logical()
dom <- integer()
###################paralelizar dominantes
#for (i in 1:n) {
p3<-function(i){
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * Soluciones[i,], sign * Soluciones[j,], 2))
}
cuantos <- sum(d)
#return( cuantos)
return( cuantos == 0) # nadie le domina
}
no.dom<-rbind(no.dom,foreach(i = 1:n, .combine=rbind)%dopar% p3(i))
frente <- subset(Soluciones, no.dom) # solamente las no dominadas
png("p_frente.png")
plot (Soluciones[,1], Soluciones[,2], xlab= "Diámetro",
ylab="Voltaje",
main="Frente de Pareto")
points(frente[,1], frente[,2], col="green", pch=16, cex=1.5)
graphics.off()
dimfrente<-dim(frente)[1]
if(dimfrente>2){
ordenf<-frente[order(frente[,1]),]
dis<-c()
for(i in 1:dimfrente-1){
d<- sqrt((ordenf[i,1]-ordenf[i+1,1])**2+(ordenf[i,2]-ordenf[i+1,2])**2)
dis<-c(dis,d)
}
umbral<-mean(dis-14.5)
nuevo<-rep(FALSE,dimfrente)
for(i in 1:dimfrente){
if (ordenf[i,]==head(ordenf,n=1)||ordenf[i,]==tail(ordenf,n=1)){
nuevo[i]=TRUE
}else{
j<-max(which(nuevo))
d<-sqrt((ordenf[i,1]-ordenf[j,1])**2+(ordenf[i,2]-ordenf[j,2])**2)
if(d>=umbral){
nuevo[i]=TRUE
}else{nuevo[i]=FALSE
}
}
}
mejor<-subset(ordenf,nuevo)
library(ggplot2)
png("pfrentemod.png")
ggplot()+
geom_point(data = Soluciones, aes(x=Soluciones[,1], y=Soluciones[,2]),size=2)+
xlab("Diametro") +
ylab("Voltaje") +
geom_point(data = frente, aes(x=frente[,1],y=frente[,2]), color="blue", size=4)+
geom_point(data = mejor, aes(x=mejor[,1],y=mejor[,2]), color="red", size=2)+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Diversificación de frente")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
plot.title = element_text(size=14,face="bold"))+
#graphics.off()
ggsave("pfrentemod.png", width=10, height=5)
png("pnuevofrente.png")
ggplot()+
geom_point(data = Soluciones, aes(x=Soluciones[,1], y=Soluciones[,2]),size=2)+
xlab("Diametro") +
ylab("Voltaje") +
geom_point(data = mejor, aes(x=mejor[,1],y=mejor[,2]), color="red", size=4)+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Nuevo frente")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14),
plot.title = element_text(size=14,face="bold"))+
#graphics.off()
ggsave("pnuevofrente.png",width = 10, height = 5)
}
stopImplicitCluster()
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
timei<-Sys.time()
domin.by <- function(target, challenger, total) {
if (sum(challenger < target) > 0) {
return(FALSE) # hay empeora
} # si no hay empeora, vemos si hay mejora
return(sum(challenger > target) > 0)
}
datos<-read.csv(file="exp.csv", head=TRUE, sep = ",")
reg<-data.frame()
exponentes<-3
columna<-dim(datos)[2]
for (i in seq(2,columna,1)){
lineal<-lm(datos[,i] ~datos[,1], datos)
exponencial<-lm(log(datos[,i])~datos[,1],datos)
polinomial<-lm(datos[,i] ~ poly(datos[,1],exponentes,raw = TRUE),datos)
lin<-cbind(colnames(datos)[i],"Lineal",summary(lineal)$r.squared,summary(lineal)$coefficients[2,1],
0,0,summary(lineal)$coefficients[1,1])
exp<-cbind(colnames(datos)[i],"Exponencial",summary(exponencial)$r.squared,summary(exponencial)$coefficients[2,1],
0,0,summary(exponencial)$coefficients[1,1])
poli<-cbind(colnames(datos)[i],"Polinomial",summary(polinomial)$r.squared,summary(polinomial)$coefficients[2,1],
summary(polinomial)$coefficients[3,1],summary(polinomial)$coefficients[4,1],summary(exponencial)$coefficients[1,1])
reg<-rbind(reg,lin,exp,poli)
}
colnames(reg)<-c("Caracteristica","Regresion","Rcuadrada","C.lineal",
"C.cuadratico","C.cubico","Interseccion")
reg$Rcuadrada<-as.numeric(levels(reg$Rcuadrada))[reg$Rcuadrada]
reg$C.lineal<-as.numeric(levels(reg$C.lineal))[reg$C.lineal]
reg$C.cuadratico<-as.numeric(levels(reg$C.cuadratico))[reg$C.cuadratico]
reg$C.cubico<-as.numeric(levels(reg$C.cubico))[reg$C.cubico]
reg$Interseccion<-as.numeric(levels(reg$Interseccion))[reg$Interseccion]
n<-200
Vi<-runif(n,800,4500)
#funciones<-function(j){
Soluciones<-data.frame()
for(j in 2:3){
res<-c()
nombre<-colnames(datos)[j]
temporal<-reg[reg$Caracteristica==nombre,]
f<-temporal[which.max(temporal$Rcuadrada),]
for(k in 1:n){
V<-Vi[k]
if (f$Regresion=="Polinomial"){y=(f$C.lineal*V) +(f$C.cuadratico*(V**2))
+ (f$C.cubico*(V**3))+ f$Interseccion
print("p")
print(y)}
if(f$Regresion=="Lineal"){y=(f$C.lineal*V) + f$Interseccion
print("l")}
if(f$Regresion=="Exponencial"){y=f$C.lineal*log(V) + f$Interseccion
print("e")}
res<-c(res,y)
}
Soluciones<-cbind(Soluciones,res)
#  return(res)
}
#############################
Soluciones$viscosidad<-Vi
png("p_inicial.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diametro (minimizar)", ylab="voltaje (minimizar)", main="Relación de parámetros")
graphics.off()
sign<-c(-1, -1)
mejordiam <- which.max(sign[1] * Soluciones[,1])#elige el maximom sign por evaluacion
mejorvolt <- which.max(sign[2] * Soluciones[,2])
png("p11_init.png")
plot(Soluciones[,1], Soluciones[,2], xlab="diámetro (min)", ylab="voltaje (min)", main="Relación de parámetros")
graphics.off()
png("p_mejores.png")
plot(Soluciones[,1], Soluciones[,2], xlab="distancia (mejor con cuadro azul)",
ylab="voltaje (mejor con bolita naranja)",
main="Relación de parámetros")
points(Soluciones[mejordiam, 1], Soluciones[mejordiam, 2], col="blue", pch=15, cex=1.5)
points(Soluciones[mejorvolt, 1], Soluciones[mejorvolt, 2], col="orange", pch=16, cex=1.5)
graphics.off()
no.dom <- logical()
dom <- integer()
###################
for (i in 1:n) {
d <- logical()
for (j in 1:n) {
d <- c(d, domin.by(sign * Soluciones[i,], sign * Soluciones[j,], 2))
}
cuantos <- sum(d)
dominadores <- c(dominadores, cuantos)
no.dom <- c(no.dom, cuantos == 0) # nadie le domina
}
#################
frente <- subset(Soluciones, no.dom) # solamente las no dominadas
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
