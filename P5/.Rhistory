install.packages("ggplot")
install.packages("statnet.common")
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(resultados)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bloxpot(resultados)
boxplot(re)
boxplot(resultados)
colnames(resultados)<-("Longitud", "Dimension", "Semillas")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
inicio <- -6
final <- -inicio
paso <- 0.25
x <- seq(inicio, final, paso)
f <- function(x) { return(1 / (exp(x) + exp(-x))) }
png("p5f.png") # dibujamos f(x) para ver como es
plot(x,  (2/pi) * (1/(exp(x)+exp(-x))))
lines(x,  (2/pi) * (1/(exp(x)+exp(-x))), type="l")
graphics.off()
suppressMessages(library(distr))
g <- function(x) { return((2 / pi) * f(x)) }
generador  <- r(AbscontDistribution(d = g)) # creamos un generador
muestra <- generador(50000) # sacamos una muestra
png("p5m.png") # validamos con un dibujo
hist(muestra, freq=F, breaks=50,
main="Histograma de g(x) comparado con g(x)",
xlim=c(inicio, final), ylim=c(0, 0.4))
lines(x, g(x), col="red") # dibujamos g(x) encima del histograma
graphics.off()
desde <- 3
hasta <- 7
pedazo <- 50000
cuantos <- 500
parte <- function() {
valores <- generador(pedazo)
return(sum(valores >= desde & valores <= hasta))
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
source('~/.active-rstudio-document', echo=TRUE)
install.packages("distr")
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P5")
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
inicio <- -6
final <- -inicio
paso <- 0.25
x <- seq(inicio, final, paso)
f <- function(x) { return(1 / (exp(x) + exp(-x))) }
png("p5f.png") # dibujamos f(x) para ver como es
plot(x,  (2/pi) * (1/(exp(x)+exp(-x))))
lines(x,  (2/pi) * (1/(exp(x)+exp(-x))), type="l")
graphics.off()
g <- function(x) { return((2 / pi) * f(x)) }
generador  <- r(AbscontDistribution(d = g)) # creamos un generador
muestra <- generador(50000) # sacamos una muestra
png("p5m.png") # validamos con un dibujo
hist(muestra, freq=F, breaks=50,
main="Histograma de g(x) comparado con g(x)",
xlim=c(inicio, final), ylim=c(0, 0.4))
lines(x, g(x), col="red") # dibujamos g(x) encima del histograma
graphics.off()
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
View(generador)
View(muestra)
generador  <- r(AbscontDistribution(d = g)) # creamos un generador
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
pedazo
valores
View(valores)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
montecarlo
integral
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
montecarlo
sum(montecarlo)
cuantos*pedazo
86/2500
pi/2
(pi/2)*(integral)
pi
suppressMessages(library(distr))
g <- function(x) { return((2 / pi) * f(x)) }
generador  <- r(AbscontDistribution(d = g)) # creamos un generador
#muestra <- generador(50000) # sacamos una muestra
#png("p5m.png") # validamos con un dibujo
#hist(muestra, freq=F, breaks=50,
#     main="Histograma de g(x) comparado con g(x)",
#     xlim=c(inicio, final), ylim=c(0, 0.4))
#lines(x, g(x), col="red") # dibujamos g(x) encima del histograma
#graphics.off()
desde <- 3 #limites de la integral
hasta <- 7
pedazo <- 500
cuantos <- 5
parte <- function() {
valores <- generador(pedazo)
return(sum(valores >= desde & valores <= hasta))
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
montecarlo <- foreach(i = 1:cuantos, .combine=c) %dopar% parte()
stopImplicitCluster()
integral <- sum(montecarlo) / (cuantos * pedazo)
print((pi / 2) * integral)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
View(parte)
View(resultados)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', encoding = 'ASCII', echo=TRUE)
View(resultados)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
resultados
ls()
rm(list = ls())
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
for(cuantos in seq(5,10,5))
parte <- function() {
valores <- generador(pedazo)
return(sum(valores >= desde & valores <= hasta))
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
montecarlo <- foreach(i = 1:cuantos, .combine=c) %dopar% parte()
stopImplicitCluster()
integral <- sum(montecarlo) / (cuantos * pedazo)
estimado=((pi / 2) * integral)
wa<-0.04883411112604931084064237220194267497311653701062409984
print((pi / 2) * integral)
print(cuantos)
dif=wa-estimado
}
#el resultado que se expondra es la diferencia entre el valor obtenido y el valor de wolframAlpha
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
rm()
rm(list=ls())
source('~/GitHub/SimulacionComputacional/P5/Codigobase.R', echo=TRUE)
