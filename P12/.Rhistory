r <- min(decimal(salida, n), k) # todos los no-existentes van al final
contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
cuenta[t]<-(r==d)
}
bueno=sum(cuenta)
porcentaje=(bueno/pr)*100
print(porcentaje)
#print(contadores)
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
timei<-Sys.time()
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 9
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
##########################################
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
pr=600
##########################################
cuenta<-rep(FALSE, pr)
for (t in 1:pr) { # prueba
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
cuenta[t]<-(r==d)
}
bueno=sum(cuenta)
porcentaje=(bueno/pr)*100
print(porcentaje)
#print(contadores)
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
timei<-Sys.time()
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 3
dim <- r * c
tranqui <- 0.99
tasa <- 0.15
tope <- 9
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
##########################################
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
##########################################
pr=800
#for (t in 1:300) { # prueba
f2<-function(t){
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
return(r==d)
}
cuenta<-foreach(t=1:pr, .combine=c) %dopar% f2(t)
bueno=sum(cuenta)
porcentaje=(bueno/pr)*100
print(porcentaje)
#contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
#print(contadores)
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
timei<-Sys.time()
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 9
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
##########################################
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
pr=800
##########################################
cuenta<-rep(FALSE, pr)
for (t in 1:pr) { # prueba
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
cuenta[t]<-(r==d)
}
bueno=sum(cuenta)
porcentaje=(bueno/pr)*100
print(porcentaje)
#print(contadores)
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
rm(list = ls())
gc()
Tiempos<-data.frame()
Tnp<-numeric()
Tp<-numeric()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for(corrida in 1:10) {
for(pr in seq(600, 1200, 200)){
source('~/GitHub/SimulacionComputacional/P12/originalP12.R', encoding = 'UTF-8')
Tnp <- cbind("original", tiempo, pr,porcentaje,  corrida)
#hacer violinplot
#png(paste("p11s_",corrida, k,n,".png"), width=600, height=300)
#plot(1:tmax, mejores, xlab="Paso", ylab="Mayor valor", type='l', ylim=c(0.95*min(mejores), 1.05*optimo))
#points(1:tmax, mejores, pch=15)
#abline(h=optimo, col="green", lwd=3)
#graphics.off()
source('~/GitHub/SimulacionComputacional/P12/paraleloP12.R', encoding = 'UTF-8')
Tp <- cbind("paralelo",tiempo, pr, porcentaje, corrida)
#hacer violinplot
#png(paste("p11p_",corrida,init,".png"), width=600, height=300)
#plot(1:tmax, mejores, xlab="Paso", ylab="Mayor valor", type='l', ylim=c(0.95*min(mejores), 1.05*optimo))
#points(1:tmax, mejores, pch=15)
#abline(h=optimo, col="green", lwd=3)
#graphics.off()
Tiempos<-  rbind(Tiempos,Tnp, Tp)
}
}
stopImplicitCluster()
#save.image(file="datosR11_1.RData")
colnames (Tiempos)= c("Tipo","Tiempo","Prueba", "porcentaje", "corrida")
Tiempos$Tipo=as.factor(Tiempos$Tipo)
Tiempos$Tiempo=as.numeric(levels(Tiempos$Tiempo))[Tiempos$Tiempo]
#Tiempos[Tiempos$Tiempo>10,2]<-Tiempos[Tiempos$Tiempo>10,2]/60
Tiempos$Prueba=as.factor(Tiempos$Prueba)
library(ggplot2)
#png("p11R1_plot1.png")
ggplot(data=Tiempos, aes(x=Prueba, y=Tiempo, color=Tipo)) +
guides(color=guide_legend(title = NULL))+
geom_boxplot()+
ggtitle("Tiempos comparados con diferente tamaño de prueba")
#graphics.off()
Tiempos<-data.frame()
Tnp<-numeric()
Tp<-numeric()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for(corrida in 1:10) {
for(pr in seq(2000, 5000, 1000)){
source('~/GitHub/SimulacionComputacional/P12/originalP12.R', encoding = 'UTF-8')
Tnp <- cbind("original", tiempo, pr,porcentaje,  corrida)
#hacer violinplot
#png(paste("p11s_",corrida, k,n,".png"), width=600, height=300)
#plot(1:tmax, mejores, xlab="Paso", ylab="Mayor valor", type='l', ylim=c(0.95*min(mejores), 1.05*optimo))
#points(1:tmax, mejores, pch=15)
#abline(h=optimo, col="green", lwd=3)
#graphics.off()
source('~/GitHub/SimulacionComputacional/P12/paraleloP12.R', encoding = 'UTF-8')
Tp <- cbind("paralelo",tiempo, pr, porcentaje, corrida)
#hacer violinplot
#png(paste("p11p_",corrida,init,".png"), width=600, height=300)
#plot(1:tmax, mejores, xlab="Paso", ylab="Mayor valor", type='l', ylim=c(0.95*min(mejores), 1.05*optimo))
#points(1:tmax, mejores, pch=15)
#abline(h=optimo, col="green", lwd=3)
#graphics.off()
Tiempos<-  rbind(Tiempos,Tnp, Tp)
}
}
stopImplicitCluster()
#save.image(file="datosR11_1.RData")
colnames (Tiempos)= c("Tipo","Tiempo","Prueba", "porcentaje", "corrida")
Tiempos$Tipo=as.factor(Tiempos$Tipo)
Tiempos$Tiempo=as.numeric(levels(Tiempos$Tiempo))[Tiempos$Tiempo]
#Tiempos[Tiempos$Tiempo>10,2]<-Tiempos[Tiempos$Tiempo>10,2]/60
Tiempos$Prueba=as.factor(Tiempos$Prueba)
library(ggplot2)
#png("p11R1_plot1.png")
ggplot(data=Tiempos, aes(x=Prueba, y=Tiempo, color=Tipo)) +
guides(color=guide_legend(title = NULL))+
geom_boxplot()+
ggtitle("Tiempos comparados con diferente tamaño de prueba")
#graphics.off()
Tiempos<-data.frame()
Tnp<-numeric()
Tp<-numeric()
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for(corrida in 1:10) {
for(pr in seq(2000, 5000, 1000)){
source('~/GitHub/SimulacionComputacional/P12/originalP12.R', encoding = 'UTF-8')
Tnp <- cbind("original", tiempo, pr,porcentaje,  corrida)
#hacer violinplot
#png(paste("p11s_",corrida, k,n,".png"), width=600, height=300)
#plot(1:tmax, mejores, xlab="Paso", ylab="Mayor valor", type='l', ylim=c(0.95*min(mejores), 1.05*optimo))
#points(1:tmax, mejores, pch=15)
#abline(h=optimo, col="green", lwd=3)
#graphics.off()
source('~/GitHub/SimulacionComputacional/P12/paraleloP12.R', encoding = 'UTF-8')
Tp <- cbind("paralelo",tiempo, pr, porcentaje, corrida)
#hacer violinplot
#png(paste("p11p_",corrida,init,".png"), width=600, height=300)
#plot(1:tmax, mejores, xlab="Paso", ylab="Mayor valor", type='l', ylim=c(0.95*min(mejores), 1.05*optimo))
#points(1:tmax, mejores, pch=15)
#abline(h=optimo, col="green", lwd=3)
#graphics.off()
Tiempos<-  rbind(Tiempos,Tnp, Tp)
}
}
stopImplicitCluster()
#save.image(file="datosR11_1.RData")
colnames (Tiempos)= c("Tipo","Tiempo","Prueba", "porcentaje", "corrida")
Tiempos$Tipo=as.factor(Tiempos$Tipo)
Tiempos$Tiempo=as.numeric(levels(Tiempos$Tiempo))[Tiempos$Tiempo]
#Tiempos[Tiempos$Tiempo>10,2]<-Tiempos[Tiempos$Tiempo>10,2]/60
Tiempos$Prueba=as.factor(Tiempos$Prueba)
library(ggplot2)
#png("p11R1_plot1.png")
ggplot(data=Tiempos, aes(x=Prueba, y=Tiempo, color=Tipo)) +
guides(color=guide_legend(title = NULL))+
geom_boxplot()+
ggtitle("Tiempos comparados con diferente tamaño de prueba")
#graphics.off()
timei<-Sys.time()
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 3
dim <- r * c
tranqui <- 0.99
tasa <- 0.15
tope <- 9
digitos <- 0:tope
k <- length(digitos)
#contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
#rownames(contadores) <- 0:tope
#colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
##########################################
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
##########################################
pr=1000
#for (t in 1:300) { # prueba
f2<-function(){
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
return(r==d)
}
cuenta<-foreach(t=1:pr, .combine=c) %dopar% f2()
bueno=sum(cuenta)
porcentaje=(bueno/pr)*100
print(porcentaje)
#contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
#print(contadores)
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
cuenta
timei<-Sys.time()
binario <- function(d, l) {
b <-  rep(FALSE, l)
while (l > 0 | d > 0) {
b[l] <- (d %% 2 == 1)
l <- l - 1
d <- bitwShiftR(d, 1)
}
return(b)
}
decimal <- function(bits, l) {
valor <- 0
for (pos in 1:l) {
valor <- valor + 2^(l - pos) * bits[pos]
}
return(valor)
}
modelos <- read.csv("digitos.modelo", sep=" ", header=FALSE, stringsAsFactors=F)
modelos[modelos=='n'] <- 0.995
modelos[modelos=='g'] <- 0.92
modelos[modelos=='b'] <- 0.002
r <- 5
c <- 3
dim <- r * c
tasa <- 0.15
tranqui <- 0.99
tope <- 9
digitos <- 0:tope
k <- length(digitos)
contadores <- matrix(rep(0, k*(k+1)), nrow=k, ncol=(k+1))
rownames(contadores) <- 0:tope
colnames(contadores) <- c(0:tope, NA)
n <- floor(log(k-1, 2)) + 1
neuronas <- matrix(runif(n * dim), nrow=n, ncol=dim) # perceptrones
##########################################
for (t in 1:5000) { # entrenamiento
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,]
correcto <- binario(d, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
if (deseada != resultado) {
ajuste <- tasa * (deseada - resultado)
tasa <- tranqui * tasa
neuronas[i,] <- w + ajuste * pixeles
}
}
}
pr=1000
##########################################
cuenta<-rep(FALSE, pr)
for (t in 1:pr) { # prueba
d <- sample(0:tope, 1)
pixeles <- runif(dim) < modelos[d + 1,] # fila 1 contiene el cero, etc.
correcto <- binario(d, n)
salida <- rep(FALSE, n)
for (i in 1:n) {
w <- neuronas[i,]
deseada <- correcto[i]
resultado <- sum(w * pixeles) >= 0
salida[i] <- resultado
}
r <- min(decimal(salida, n), k) # todos los no-existentes van al final
contadores[d+1, r+1] <- contadores[d+1, r+1] + 1
cuenta[t]<-(r==d)
}
bueno=sum(cuenta)
porcentaje=(bueno/pr)*100
print(porcentaje)
#print(contadores)
timef<-Sys.time()
tiempo<-(timef-timei)
print(tiempo)
cuenta
