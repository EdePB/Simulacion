}
datos=cbind(tiempo,fx,fxpr,delta, best)
resultados=rbind(resultados,datos)
}
names(resultados)=c("Tiempo","fx","fxpr","delta","posx")
#paso$Xi=as.factor(paso$Xi)
library(ggplot2)
g1<-ggplot(resultados, aes(x=Tiempo, y=fx, color="red")) +
geom_line() +
geom_point(size=2)+
xlab("Tiempo") + ylab("f(x)")
g1
f <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
low <- -2
high <- 2
step <- 0.25
replicas <- 100
best<-c()
t=35
WA<-0.0666822
po<-function (){
datos=data.frame()
resultados=data.frame()
currx <- runif(1, low, high)
curry <- runif(1, low, high)
best <- c(currx, curry)
for (tiempo in 1:t) {
delta <- runif(1, 0, step)
left <- currx - delta
right <- currx + delta
down <- curry - delta
up <- curry + delta
if (f(left,curry) > f(right,curry)) {
bestx <- c(left,curry)
} else {
bestx <- c(right,curry)
}
if (f(currx, up) > f(currx, down)) {
besty <-c(currx,up)
} else {
besty <- c(currx,down)
}
if(f (bestx[1],bestx[2])> f(besty[1], besty[2])){
currx<-bestx[1]
curry<-bestx[2]
}else{
currx<-besty[1]
curry<-besty[2]
}
if (f(currx, curry) > f(best[1],best[2])) {
best <- c(currx,curry)
}
datos=cbind(i,tiempo, currx, curry,f(best[1], best[2]))
resultados=rbind(resultados,datos)
}
return(resultados)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
y <- foreach(i = 1:10, .combine=rbind) %dopar% po()
stopImplicitCluster()
names(y)=c("corrida","tiempo","posx","posy", "Fevaluada")
y$corrida=as.factor(y$corrida)
#png("p7_2de.png",width=700, height = 700)
library(lattice) # lo mismo aplica con este paquete
png("p7_T.png", width=600, height=500)
xyplot(data=y,Fevaluada~tiempo, xlab="Pasos",ylab="f(x,y)",groups=corrida,
panel=function(x,y,subscripts,groups) {
panel.xyplot(x,y)
panel.stripplot(x,y,groups = groups,subscripts=subscripts, type="o", pch=16)
panel.abline(h=WA,col="green", lwd=2)
}
)
#graphics.off()
f <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
low <- -2
high <- 2
step <- 0.25
replicas <- 100
best<-c()
t=35
WA<-0.0666822
po<-function (){
datos=data.frame()
resultados=data.frame()
currx <- runif(1, low, high)
curry <- runif(1, low, high)
best <- c(currx, curry)
for (tiempo in 1:t) {
delta <- runif(1, 0, step)
left <- currx - delta
right <- currx + delta
down <- curry - delta
up <- curry + delta
if (f(left,curry) > f(right,curry)) {
bestx <- c(left,curry)
} else {
bestx <- c(right,curry)
}
if (f(currx, up) > f(currx, down)) {
besty <-c(currx,up)
} else {
besty <- c(currx,down)
}
if(f (bestx[1],bestx[2])> f(besty[1], besty[2])){
currx<-bestx[1]
curry<-bestx[2]
}else{
currx<-besty[1]
curry<-besty[2]
}
if (f(currx, curry) > f(best[1],best[2])) {
best <- c(currx,curry)
}
datos=cbind(i,tiempo, currx, curry,f(best[1], best[2]))
resultados=rbind(resultados,datos)
}
return(resultados)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
y <- foreach(i = 1:10, .combine=rbind) %dopar% po()
stopImplicitCluster()
names(y)=c("corrida","tiempo","posx","posy", "Fevaluada")
y$corrida=as.factor(y$corrida)
#png("p7_2de.png",width=700, height = 700)
library(lattice) # lo mismo aplica con este paquete
png("p7_T.png", width=600, height=500)
xyplot(data=y,Fevaluada~tiempo, xlab="Pasos",ylab="f(x,y)",groups=corrida,
panel=function(x,y,subscripts,groups) {
panel.xyplot(x,y)
panel.stripplot(x,y,groups = groups,subscripts=subscripts, type="o", pch=16)
panel.abline(h=WA,col="green", lwd=2)
}
)
#graphics.off()
f <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
low <- -2
high <- 2
step <- 0.25
replicas <- 100
best<-c()
t=35
WA<-0.0666822
po<-function (){
datos=data.frame()
resultados=data.frame()
currx <- runif(1, low, high)
curry <- runif(1, low, high)
best <- c(currx, curry)
for (tiempo in 1:t) {
delta <- runif(1, 0, step)
left <- currx - delta
right <- currx + delta
down <- curry - delta
up <- curry + delta
if (f(left,curry) > f(right,curry)) {
bestx <- c(left,curry)
} else {
bestx <- c(right,curry)
}
if (f(currx, up) > f(currx, down)) {
besty <-c(currx,up)
} else {
besty <- c(currx,down)
}
if(f (bestx[1],bestx[2])> f(besty[1], besty[2])){
currx<-bestx[1]
curry<-bestx[2]
}else{
currx<-besty[1]
curry<-besty[2]
}
if (f(currx, curry) > f(best[1],best[2])) {
best <- c(currx,curry)
}
datos=cbind(i,tiempo, currx, curry,f(best[1], best[2]))
resultados=rbind(resultados,datos)
}
return(resultados)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
y <- foreach(i = 1:10, .combine=rbind) %dopar% po()
stopImplicitCluster()
names(y)=c("corrida","tiempo","posx","posy", "Fevaluada")
y$corrida=as.factor(y$corrida)
#png("p7_2de.png",width=700, height = 700)
library(lattice) # lo mismo aplica con este paquete
png("p7_T.png", width=600, height=500)
xyplot(data=y,Fevaluada~tiempo, xlab="Pasos",ylab="f(x,y)",groups=corrida,
panel=function(x,y,subscripts,groups) {
panel.xyplot(x,y)
panel.stripplot(x,y,groups = groups,subscripts=subscripts, type="o", pch=16)
panel.abline(h=WA,col="green", lwd=2)
}
)
graphics.off()
f <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
low <- -2
high <- 2
step <- 0.25
replicas <- 100
best<-c()
t=35
WA<-0.0666822
po<-function (){
datos=data.frame()
resultados=data.frame()
currx <- runif(1, low, high)
curry <- runif(1, low, high)
best <- c(currx, curry)
for (tiempo in 1:t) {
delta <- runif(1, 0, step)
left <- currx - delta
right <- currx + delta
down <- curry - delta
up <- curry + delta
if (f(left,curry) > f(right,curry)) {
bestx <- c(left,curry)
} else {
bestx <- c(right,curry)
}
if (f(currx, up) > f(currx, down)) {
besty <-c(currx,up)
} else {
besty <- c(currx,down)
}
if(f (bestx[1],bestx[2])> f(besty[1], besty[2])){
currx<-bestx[1]
curry<-bestx[2]
}else{
currx<-besty[1]
curry<-besty[2]
}
if (f(currx, curry) > f(best[1],best[2])) {
best <- c(currx,curry)
}
datos=cbind(i,tiempo, currx, curry,f(best[1], best[2]))
resultados=rbind(resultados,datos)
}
return(resultados)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
y <- foreach(i = 1:10, .combine=rbind) %dopar% po()
stopImplicitCluster()
names(y)=c("corrida","tiempo","posx","posy", "Fevaluada")
y$corrida=as.factor(y$corrida)
#png("p7_2de.png",width=700, height = 700)
library(lattice) # lo mismo aplica con este paquete
png("p7_T.png", width=600, height=500)
xyplot(data=y,Fevaluada~tiempo, xlab="Pasos",ylab="f(x,y)",groups=corrida,
panel=function(x,y,subscripts,groups) {
panel.xyplot(x,y)
panel.stripplot(x,y,groups = groups,subscripts=subscripts, type="o", pch=16)
panel.abline(h=WA,col="green", lwd=2)
}
)
graphics.off()
library(ggplot2)
g1<-ggplot(d, aes(x, y)) +
geom_raster(aes(fill =z))+
scale_fill_gradient(low="red", high="white")
resultados=data.frame()
source('~/GitHub/SimulacionComputacional/P7/P7R1.R', echo=TRUE)
f <- function(x, y) {
return(((x + 0.5)^4 - 30 * x^2 - 20 * x + (y + 0.5)^4 - 30 * y^2 - 20 * y)/100)
}
#png("p7_2d.png", width=700, height=700)
x <- seq(-6, 5, 0.25)
y <-  x
z <- outer(x, y, f)
colnames(z)=x
rownames(z)=y
library(reshape2) # recuerda instalar paquetes antes de intentar su uso
d <- melt(z)
names(d) <- c("x", "y", "z")
#library(lattice) # lo mismo aplica con este paquete
#png("p7_flat_2.png", width=500, height=500)
#g1<-levelplot(z ~ x * y, data = d)
#graphics.off()
library(ggplot2)
g1<-ggplot(d, aes(x, y)) +
geom_raster(aes(fill =z))+
scale_fill_gradient(low="red", high="white")
low <- -2
high <- 2
step <- 0.25
best<-c()
t=50
po<-function (){
datos=data.frame()
resultados=data.frame()
currx <- runif(1, low, high)
curry <- runif(1, low, high)
best <- c(currx, curry)
for (tiempo in 1:t) {
delta <- runif(1, 0, step)
left <- currx - delta
right <- currx + delta
down <- curry - delta
up <- curry + delta
if (f(left,curry) > f(right,curry)) {
bestx <- c(left,curry)
} else {
bestx <- c(right,curry)
}
if (f(currx, up) > f(currx, down)) {
besty <-c(currx,up)
} else {
besty <- c(currx,down)
}
if(f (bestx[1],bestx[2])> f(besty[1], besty[2])){
currx<-bestx[1]
curry<-bestx[2]
}else{
currx<-besty[1]
curry<-besty[2]
}
if (f(currx, curry) > f(best[1],best[2])) {
best <- c(currx,curry)
}
datos=cbind(i,tiempo, currx, curry,f(best[1], best[2]))
resultados=rbind(resultados,datos)
}
return(resultados)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
y <- foreach(i = 1:10, .combine=rbind) %dopar% po()
names(y)=c("corrida","tiempo","posx","posy", "f(x)")
y$corrida=as.factor(y$corrida)
for(tiempo in 1:t){
g<-y[y$tiempo==tiempo,]
g1+geom_point(data=g, aes(g$posx,g$posy, color=corrida))
#ggsave(paste("p7R1",tiempo,".png"))
}
f <- function(x) {
return(cos(14.5*x - 0.3) + x * (x + 0.2) + 1.01)
}
#x <- seq(-3, 3, 0.05)
#png("p7_1d.png", width=500, height=400)
#plot(x, f(x), type="l")
#graphics.off()
low <- -3
high <- 3
step <- 1
t=100
#temp=10
#j=0.99
resultados=data.frame()
datos=data.frame()
mejor=data.frame()
paso=data.frame()
for(j in c(0.99,0.95, 0.91)){
for(temp in seq(10,100,10)){
reg=cbind(temp)
for (tiempo in 1:t) {
x <- runif(1, low, high)
best=x
delta <- runif(1, 0, step)
xpr<- x + delta
d=f(xpr)-f(x)
p=exp(-d/temp)
datos=cbind(tiempo,x,xpr,temp)
if (d > 0) {
x=xpr
} else {
if (runif(1) < p) {
x=xpr
temp=temp*j
}
}
datos=cbind(datos,d,temp,p,x,f(x))
resultados=rbind(resultados,datos)
}
mejor=cbind(j,reg,temp,max(resultados[9]))
paso=rbind(paso,mejor)
}
}
names(paso)=c("Xi","Tempi","Temperatura","Vmaximo")
paso$Xi=as.factor(paso$Xi)
library(ggplot2)
g1<-ggplot(paso, aes(x=Tempi, y=Vmaximo,color=Xi)) +
geom_line() +
geom_point(size=2)+
xlab("Temperatura inicial") + ylab("Valor mÃ¡ximo")
#ggsave("p7R2.png")
f <- function(x) {
return(cos(14.5*x - 0.3) + x * (x + 0.2) + 1.01)
}
#x <- seq(-3, 3, 0.05)
#png("p7_1d.png", width=500, height=400)
#plot(x, f(x), type="l")
#graphics.off()
low <- -3
high <- 3
step <- 1
t=100
#temp=10
#j=0.99
resultados=data.frame()
datos=data.frame()
mejor=data.frame()
paso=data.frame()
for(j in c(0.99,0.95, 0.91)){
for(temp in seq(10,100,10)){
reg=cbind(temp)
for (tiempo in 1:t) {
x <- runif(1, low, high)
best=x
delta <- runif(1, 0, step)
xpr<- x + delta
d=f(xpr)-f(x)
p=exp(-d/temp)
datos=cbind(tiempo,x,xpr,temp)
if (d > 0) {
x=xpr
} else {
if (runif(1) < p) {
x=xpr
temp=temp*j
}
}
datos=cbind(datos,d,temp,p,x,f(x))
resultados=rbind(resultados,datos)
}
mejor=cbind(j,reg,temp,max(resultados[9]))
paso=rbind(paso,mejor)
}
}
names(paso)=c("Xi","Tempi","Temperatura","Vmaximo")
paso$Xi=as.factor(paso$Xi)
library(ggplot2)
g1<-ggplot(paso, aes(x=Tempi, y=Vmaximo,color=Xi)) +
geom_line() +
geom_point(size=2)+
xlab("Temperatura inicial") + ylab("Valor mÃ¡ximo")
#ggsave("p7R2.png")
f <- function(x) {
return(cos(14.5*x - 0.3) + x * (x + 0.2) + 1.01)
}
low <- -3
high <- -low
tmax <- 100
x <- runif(1, low, high)
best <- x
step <- .1
datos=data.frame()
resultados= data.frame()
for (tiempo in 1:tmax) {
delta <- runif(1, 0, step)
xpr<- x + delta
fxpr<- f(xpr)
fx <- f(x)
if (fxpr > fx) {
x <- xpr
}
if (f(x) < f(best)) { # minimizamos
best <- x
}
datos=cbind(tiempo,fx,fxpr,delta, best)
resultados=rbind(resultados,datos)
}
names(resultados)=c("Tiempo","fx","fxpr","delta","posx")
#paso$Xi=as.factor(paso$Xi)
library(ggplot2)
g1<-ggplot(resultados, aes(x=Tiempo, y=fx, color="red")) +
geom_line() +
geom_point(size=2)+
xlab("Tiempo") + ylab("f(x)")
f <- function(x) {
return(cos(14.5*x - 0.3) + x * (x + 0.2) + 1.01)
}
low <- -3
high <- -low
tmax <- 100
x <- runif(1, low, high)
best <- x
step <- .1
datos=data.frame()
resultados= data.frame()
for (tiempo in 1:tmax) {
delta <- runif(1, 0, step)
xpr<- x + delta
fxpr<- f(xpr)
fx <- f(x)
if (fxpr > fx) {
x <- xpr
}
if (f(x) < f(best)) { # minimizamos
best <- x
}
datos=cbind(tiempo,fx,fxpr,delta, best)
resultados=rbind(resultados,datos)
}
names(resultados)=c("Tiempo","fx","fxpr","delta","posx")
#paso$Xi=as.factor(paso$Xi)
library(ggplot2)
g1<-ggplot(resultados, aes(x=Tiempo, y=fx, color="red")) +
geom_line() +
geom_point(size=2)+
xlab("Tiempo") + ylab("f(x)")
